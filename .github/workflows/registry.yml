# 1. add SERVICE_ACCOUNT_KEY secret
#    https://docs.github.com/ru/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions


name: Build and Push to Artifact Registry

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  TF_VAR_GCP_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
  TF_VAR_GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  TF_VAR_GCP_REGION: ${{ vars.GCP_REGION }}
  TF_VAR_PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  TF_VAR_SQL_USER: ${{ secrets.SQL_USER }}
  TF_VAR_SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  TF_VAR_DOCKER_IMAGE: "${{ vars.GCP_REGION }}-docker.pkg.dev/${{vars.GCP_PROJECT_ID}}/${{vars.REPOSITORY}}/${{ vars.IMAGE}}:${{ github.sha }}"

jobs:
  build-push-artifact:
    environment: "test"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Check for Artifact Repository
        id: check-repo
        run: |
            if gcloud artifacts repositories list --format="value(name)" | grep -q ${{ vars.REPOSITORY }}; then
              echo "Repository ${{ vars.REPOSITORY }} exists."
            else
              echo "Repository ${{ vars.REPOSITORY }} does not exist. Creating it now..."
              gcloud artifacts repositories create ${{ vars.REPOSITORY }} --repository-format=docker --location=${{vars.GCP_REGION}} --description="Docker repository"
            fi

      - name: Build image
        run: |-
          docker build --tag "${{ env.TF_VAR_DOCKER_IMAGE }}" .

      - name: Push image
        run: |-
          docker push "${{ env.TF_VAR_DOCKER_IMAGE }}"

       # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform plan
        working-directory: ./terraform
        run: terraform plan -refresh-only -input=false
      
